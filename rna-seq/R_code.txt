library(stringr)
library(DESeq2)
library(EnhancedVolcano)
library(ggplot2)
library(ggrepel)
library(dplyr)

## DESeq analysis of Methionine

# 1. Read data and process the data ####
table_count = read.table("Met_table_count.txt", header=TRUE, row.names=1)
colnames(table_count)[6:11] = c("neg_Met1", "neg_Met2", "neg_Met3",
                                "pos_Met1", "pos_Met2", "pos_MetX")
row.names(table_count) = str_remove(row.names(table_count), "gene-")

table_count_short = table_count[, 6:ncol(table_count)]
table_count_short = as.matrix(table_count_short)


# 2. Condition assignment ####
condition = factor(c("neg_Met", "neg_Met", "neg_Met", 
                     "pos_Met", "pos_Met", "pos_Met"))

coldata = data.frame(row.names=colnames(table_count_short), condition)

dds = DESeqDataSetFromMatrix(countData=table_count_short[rowSums(table_count_short) > 8, ], 
                             colData=coldata, 
                             design = ~condition)
dds


# 3. Running DESeq ####
dds = DESeq(dds)
resultsNames(dds)  # "condition_pos_Met_vs_neg_Met"

# Just to see
vst = varianceStabilizingTransformation(dds)
plotPCA(vst, intgroup = c("condition"))

# Result  ####
res = results(dds, name="condition_pos_Met_vs_neg_Met")
write.table(res, file="ResFull_posMet_vs_negMet_stat.txt", 
            sep="\t", col.names=NA, quote=FALSE)

res = read.csv("ResFull_posMet_vs_negMet_stat.txt", sep = '\t')
res = as.data.frame(res)
res$gene = rownames(res)

#### Make a list with valuable genes (acording to p.adj.value) ####
sorted_res = res[with(res, order(padj, -log2FoldChange)), ]

sorted_res_df = data.frame("id"=row.names(sorted_res), sorted_res)
p_adj_below_0.05 = sorted_res_df %>% filter(padj < 0.05) 

glyc_Met_activated = p_adj_below_0.05[p_adj_below_0.05$log2FoldChange > 0.5, ]  # activated
glyc_Met_repressed = p_adj_below_0.05[p_adj_below_0.05$log2FoldChange < -0.5, ]  # repressed

write.table(pos_Met_activated, 
            file="Result_Methionine_glyc_activated.txt", 
            sep="\t", col.names=NA, quote=FALSE)

write.table(pos_Met_repressed, 
            file= "Result_Methionine_glyc_repressed.txt", 
            sep="\t", col.names=NA, quote=FALSE)


#### Graph ####
res_without_na = na.omit(res)

EnhancedVolcano(res_without_na,
                lab = rownames(res_with_names),
                # lab = "",
                title= "Volcano plot, глицерин",
                subtitle = "Наличие / Отсутствие метионина",
                x = 'log2FoldChange',
                y = 'pvalue', 
                xlim = c(-2,3),
                ylim = c(-0.1,25),
                FCcutoff = 0.5,
                pointSize = 4,
                labSize = 5,
                drawConnectors = TRUE,
                widthConnectors = 0.1,
                typeConnectors = 'open',
                colConnectors = 'red',
                pCutoff = 0.05)


#GO
go <- read.csv('proc_glyc.csv')

library(tidyr)
data_long <- gather(go, "изменение экспрессии", "количество генов", c(репрессия,активация), factor_key=TRUE)
colnames(data_long) <- c("процесс", "изменение экспрессии", "количество генов")
p<-ggplot(data=data_long, aes(x=процесс, y = `количество генов`, fill = `изменение экспрессии`)) +
  geom_bar(stat = "identity", width = 0.8, position = position_dodge()) +
  coord_flip()+
  ggtitle("Глицерин + метионин") +
  theme_classic()+
  scale_y_continuous(breaks=c(0:9))

p

#heatmap
library(ComplexHeatmap)
res_without_na = res_without_na[,-7]
filt_res <- res_without_na[(abs(res_without_na$log2FoldChange) >0.5) & res_without_na$padj < 0.05,]
mat <- counts(dds, normalized= TRUE)[rownames(filt_res),]

mat.z = t(apply(mat,1,scale))
colnames(mat.z) <- rownames(coldata)
mat.z
Heatmap(mat.z)
Heatmap(mat.z, cluster_rows = T, cluster_columns = T, column_labels = colnames(mat.z), name = 'Z-score',
        row_labels = res_without_na[rownames(mat.z),]$symbol)
